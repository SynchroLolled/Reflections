git status <-- keeps track of changed commits

What happens when you initialize a repository? It creates a folder where you can store your tracked files.
Why do you need to do it?  this way you keep a history of the commits you make.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help? if you make a side project of the original project

How do the diagrams help you visualize the branch structure?
they give you a clear vision of what you did and how they are connected

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do? they merge the differend data.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually? You choosing when to merge vs mistakes happening because you didn't want it merged.

Git Branch to create a side project of the main project
Git branch easy-mode
*master <- means checked otu (*)
Git checkout easy-mode <--- making changes into the branch

git checkout -b (branch name)
^ git branch create & checkout

Merge 'branchname'